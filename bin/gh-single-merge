#!/bin/zsh
set -eu

# To make Pull Requests easily in personal development repositories, single commits are merged in a messy way.

if [ -n "$(git status --porcelain)" ]; then
  print -u2 -P "%F{red}The working directory has changes.%f"
  exit 1
fi

# fetch remote status.
git fetch --all

# get default remote branch, e.g. `origin/master`.
default_remote_branch=$(git rev-parse --abbrev-ref origin/HEAD)
default_branch=${default_remote_branch#origin/}
current_branch=$(git rev-parse --abbrev-ref HEAD)

# To make a Pull Request, it is necessary to create a branch.
if [[ $default_branch == $current_branch ]]; then
  print -u2 -P "%F{red}Current branch is default branch.%f"
  exit 1
fi

# push to my remote branch.
git push --verbose --set-upstream origin

# check the number of differences.
diff_count=$(git rev-list --count $default_remote_branch..HEAD)

# The only time I am allowed to be messy with this script is when I do a single commit.
if [ $diff_count -ne 1 ]; then
  print -u2 -P "%F{red}Commit diff is not one. But it is $diff_count.%f"
  exit 1
fi

# Determine the label to be assigned from the prefix of the commit message.
# If it cannot be easily determined, an error is terminated because it should be determined by myself.
# I use [commitlint/@commitlint/config-conventional](https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional)
commit_message=$(git log -1 --pretty=%B)

labels=()

# Check for BREAKING CHANGE.
if echo "$commit_message"|grep -q "^BREAKING CHANGE"; then
  labels+=("Type: Breaking Change")
fi

# Check for '!' after type/scope.
# Inferences are made rather roughly.
if echo "$commit_message"|head -n 1|grep -E -q "^.+!: "; then
  labels+=("Type: Breaking Change")
fi

# Determine the primary label based on the commit type.
case $commit_message in
  "fix"*)
    labels+=("Type: Bug")
    ;;
  "feat"*)
    labels+=("Type: Feature")
    ;;
  "ci"*)
    labels+=("Type: CI")
    ;;
  "docs"*)
    labels+=("Type: Documentation")
    ;;
  "refactor"*)
    labels+=("Type: Refactoring")
    ;;
  "test"*)
    labels+=("Type: Testing")
    ;;
  *)
    print -u2 -P "%F{red}The label could not be analogized from the commit message.%f\n$commit_message"
    exit 1
    ;;
esac

# create pull request.
gh pr create --assignee @me --fill --label "${(j:,:)labels}"

# merge by auto.
gh pr merge --auto --merge

# After the merge, it automatically comes back to the default branch.
git checkout $default_branch
git pull --progress --all --keep
